@page "/azure"

@using BlazorMonaco
@using BlazorMonaco.Bridge
@using System.Text
@using Microsoft.Azure.Management.ResourceManager.Fluent
@using blazorserver.Data
@using mktf.Helpers
@inject AzureService AzureService
@inject GraphBuilderService GraphBuilderService

<h1>Azure Thing</h1>

<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="subscriptionButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        @if (subscription == null)
        {
            <p>Choose a subscription</p>
        }
        else
        {
            @subscription.DisplayName
        }
    </button>
    <div id="subscriptions" class="dropdown-menu" aria-labelledby="subscriptionButton">
        @if (subscriptions != null)
        {
            @foreach (var sub in subscriptions)
            {
                <a class="dropdown-item" @onclick="@(()=>SubscriptionSelected(sub))">@sub.DisplayName</a>
            }
        }
    </div>
</div>
@if (subscription != null)
{
    <div class="dropdown">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="resourceGroupButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            @if (resourceGroup == null)
            {
                <p>Choose a resource group</p>
            }
            else
            {
                @resourceGroup.DisplayName
            }
        </button>
        <div id="resourceGroups" class="dropdown-menu" aria-labelledby="resourceGroupButton">
            @if (resourceGroups != null)
            {
                @foreach (var rg in resourceGroups)
                {
                    <a class="dropdown-item" @onclick="@(()=>ResourceGroupSelected(rg))">@rg.DisplayName</a>
                }
            }
        </div>
    </div>
}

<MonacoEditor Id="any-id-string" ConstructionOptions="EditorConstructionOptions" CssClass="my-monaco-editor" />


@code {
    private AzureSubscription[] subscriptions;
    private AzureResourceGroup[] resourceGroups;
    private AzureSubscription subscription = null;
    private AzureResourceGroup resourceGroup = null;
    private MonacoEditor _editor = null;

    protected override async Task OnInitializedAsync()
    {
        subscriptions = await AzureService.GetSubscriptions();
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        _editor = editor;

        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "json"
        };
    }

    private async Task EditorOnDidInit(MonacoEditorBase editor)
    {
        await editor.Layout();
        await MonacoEditorBase.SetTheme("vs-dark");
    }

    private async Task SubscriptionSelected(AzureSubscription chosenSubscription)
    {
        subscription = chosenSubscription;

        resourceGroups = await AzureService.GetResourceGroups(subscription);
    }

    private async void ResourceGroupSelected(AzureResourceGroup chosenResourceGroup)
    {
        resourceGroup = chosenResourceGroup;

        // first, populate the nodes of the graph with generic resources
        // the graph builder will get more detailed resource objects as required
        // finally the code emitter will output code that represents the graph
        IGenericResource[] resources = await AzureService.GetResources(resourceGroup);

        var graph = GraphBuilderService.BuildGraph(chosenResourceGroup.SubscriptionID.ToString(), chosenResourceGroup.DisplayName, resources);
        
        StringBuilder scriptBuilder = new StringBuilder();
        
        // obviously this needs to be replaced with a better code emitter
        foreach (var node in graph.Nodes)
        {
            scriptBuilder.Append(node.Value.Emit());
        }

        await _editor.SetValue(scriptBuilder.ToString());
    }
}
